"""add:takin db model update

Revision ID: 111634813862
Revises: cf8f4fc45278
Create Date: 2025-01-22 10:02:13.044984

"""
from alembic import op
import models as models
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '111634813862'
down_revision = 'cf8f4fc45278'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('tenant_preferred_model_providers', schema=None) as batch_op:
        batch_op.drop_index('tenant_preferred_model_provider_tenant_provider_idx')

    op.drop_table('tenant_preferred_model_providers')
    op.drop_table('tool_providers')
    op.drop_table('celery_tasksetmeta')
    with op.batch_alter_table('pinned_conversations', schema=None) as batch_op:
        batch_op.drop_index('pinned_conversation_conversation_idx')

    op.drop_table('pinned_conversations')
    with op.batch_alter_table('load_balancing_model_configs', schema=None) as batch_op:
        batch_op.drop_index('load_balancing_model_config_tenant_provider_model_idx')

    op.drop_table('load_balancing_model_configs')
    with op.batch_alter_table('provider_model_settings', schema=None) as batch_op:
        batch_op.drop_index('provider_model_setting_tenant_provider_model_idx')

    op.drop_table('provider_model_settings')
    with op.batch_alter_table('provider_models', schema=None) as batch_op:
        batch_op.drop_index('provider_model_tenant_id_provider_idx')

    op.drop_table('provider_models')
    with op.batch_alter_table('providers', schema=None) as batch_op:
        batch_op.drop_index('provider_tenant_id_provider_idx')

    op.drop_table('providers')
    with op.batch_alter_table('provider_orders', schema=None) as batch_op:
        batch_op.drop_index('provider_order_tenant_provider_idx')

    op.drop_table('provider_orders')
    with op.batch_alter_table('saved_messages', schema=None) as batch_op:
        batch_op.drop_index('saved_message_message_idx')

    op.drop_table('saved_messages')
    with op.batch_alter_table('api_based_extensions', schema=None) as batch_op:
        batch_op.drop_index('api_based_extension_tenant_idx')

    op.drop_table('api_based_extensions')
    op.drop_table('celery_taskmeta')
    with op.batch_alter_table('tenant_default_models', schema=None) as batch_op:
        batch_op.drop_index('tenant_default_model_tenant_id_provider_type_idx')

    op.drop_table('tenant_default_models')
    with op.batch_alter_table('apps', schema=None) as batch_op:
        batch_op.add_column(sa.Column('user_id', models.types.StringUUID(), nullable=False))
        batch_op.add_column(sa.Column('username', sa.String(), nullable=True))

    with op.batch_alter_table('tool_api_providers', schema=None) as batch_op:
        batch_op.add_column(sa.Column('publish', sa.Boolean(), nullable=True))

    with op.batch_alter_table('workflow_runs', schema=None) as batch_op:
        batch_op.alter_column('outputs',
               existing_type=sa.TEXT(),
               nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('workflow_runs', schema=None) as batch_op:
        batch_op.alter_column('outputs',
               existing_type=sa.TEXT(),
               nullable=True)

    with op.batch_alter_table('tool_api_providers', schema=None) as batch_op:
        batch_op.drop_column('publish')

    with op.batch_alter_table('apps', schema=None) as batch_op:
        batch_op.drop_column('username')
        batch_op.drop_column('user_id')

    op.create_table('tenant_default_models',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('provider_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('model_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('model_type', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP(0)'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP(0)'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='tenant_default_model_pkey')
    )
    with op.batch_alter_table('tenant_default_models', schema=None) as batch_op:
        batch_op.create_index('tenant_default_model_tenant_id_provider_type_idx', ['tenant_id', 'provider_name', 'model_type'], unique=False)

    op.create_table('celery_taskmeta',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('task_id_sequence'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('task_id', sa.VARCHAR(length=155), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('result', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('date_done', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('traceback', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=155), autoincrement=False, nullable=True),
    sa.Column('args', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('kwargs', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('worker', sa.VARCHAR(length=155), autoincrement=False, nullable=True),
    sa.Column('retries', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('queue', sa.VARCHAR(length=155), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='celery_taskmeta_pkey'),
    sa.UniqueConstraint('task_id', name='celery_taskmeta_task_id_key')
    )
    op.create_table('api_based_extensions',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('api_endpoint', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('api_key', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP(0)'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='api_based_extension_pkey')
    )
    with op.batch_alter_table('api_based_extensions', schema=None) as batch_op:
        batch_op.create_index('api_based_extension_tenant_idx', ['tenant_id'], unique=False)

    op.create_table('saved_messages',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('app_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('message_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP(0)'), autoincrement=False, nullable=False),
    sa.Column('created_by_role', sa.VARCHAR(length=255), server_default=sa.text("'end_user'::character varying"), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='saved_message_pkey')
    )
    with op.batch_alter_table('saved_messages', schema=None) as batch_op:
        batch_op.create_index('saved_message_message_idx', ['app_id', 'message_id', 'created_by_role', 'created_by'], unique=False)

    op.create_table('provider_orders',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('provider_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('account_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('payment_product_id', sa.VARCHAR(length=191), autoincrement=False, nullable=False),
    sa.Column('payment_id', sa.VARCHAR(length=191), autoincrement=False, nullable=True),
    sa.Column('transaction_id', sa.VARCHAR(length=191), autoincrement=False, nullable=True),
    sa.Column('quantity', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('currency', sa.VARCHAR(length=40), autoincrement=False, nullable=True),
    sa.Column('total_amount', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('payment_status', sa.VARCHAR(length=40), server_default=sa.text("'wait_pay'::character varying"), autoincrement=False, nullable=False),
    sa.Column('paid_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('pay_failed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('refunded_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP(0)'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP(0)'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='provider_order_pkey')
    )
    with op.batch_alter_table('provider_orders', schema=None) as batch_op:
        batch_op.create_index('provider_order_tenant_provider_idx', ['tenant_id', 'provider_name'], unique=False)

    op.create_table('providers',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('provider_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('provider_type', sa.VARCHAR(length=40), server_default=sa.text("'custom'::character varying"), autoincrement=False, nullable=False),
    sa.Column('encrypted_config', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_valid', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('last_used', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('quota_type', sa.VARCHAR(length=40), server_default=sa.text("''::character varying"), autoincrement=False, nullable=True),
    sa.Column('quota_limit', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('quota_used', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP(0)'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP(0)'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='provider_pkey'),
    sa.UniqueConstraint('tenant_id', 'provider_name', 'provider_type', 'quota_type', name='unique_provider_name_type_quota')
    )
    with op.batch_alter_table('providers', schema=None) as batch_op:
        batch_op.create_index('provider_tenant_id_provider_idx', ['tenant_id', 'provider_name'], unique=False)

    op.create_table('provider_models',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('provider_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('model_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('model_type', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('encrypted_config', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_valid', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP(0)'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP(0)'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='provider_model_pkey'),
    sa.UniqueConstraint('tenant_id', 'provider_name', 'model_name', 'model_type', name='unique_provider_model_name')
    )
    with op.batch_alter_table('provider_models', schema=None) as batch_op:
        batch_op.create_index('provider_model_tenant_id_provider_idx', ['tenant_id', 'provider_name'], unique=False)

    op.create_table('provider_model_settings',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('provider_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('model_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('model_type', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('enabled', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('load_balancing_enabled', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP(0)'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP(0)'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='provider_model_setting_pkey')
    )
    with op.batch_alter_table('provider_model_settings', schema=None) as batch_op:
        batch_op.create_index('provider_model_setting_tenant_provider_model_idx', ['tenant_id', 'provider_name', 'model_type'], unique=False)

    op.create_table('load_balancing_model_configs',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('provider_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('model_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('model_type', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('encrypted_config', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('enabled', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP(0)'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP(0)'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='load_balancing_model_config_pkey')
    )
    with op.batch_alter_table('load_balancing_model_configs', schema=None) as batch_op:
        batch_op.create_index('load_balancing_model_config_tenant_provider_model_idx', ['tenant_id', 'provider_name', 'model_type'], unique=False)

    op.create_table('pinned_conversations',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('app_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('conversation_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP(0)'), autoincrement=False, nullable=False),
    sa.Column('created_by_role', sa.VARCHAR(length=255), server_default=sa.text("'end_user'::character varying"), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='pinned_conversation_pkey')
    )
    with op.batch_alter_table('pinned_conversations', schema=None) as batch_op:
        batch_op.create_index('pinned_conversation_conversation_idx', ['app_id', 'conversation_id', 'created_by_role', 'created_by'], unique=False)

    op.create_table('celery_tasksetmeta',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('taskset_id_sequence'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('taskset_id', sa.VARCHAR(length=155), autoincrement=False, nullable=True),
    sa.Column('result', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('date_done', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='celery_tasksetmeta_pkey'),
    sa.UniqueConstraint('taskset_id', name='celery_tasksetmeta_taskset_id_key')
    )
    op.create_table('tool_providers',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tool_name', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('encrypted_credentials', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_enabled', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP(0)'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP(0)'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='tool_provider_pkey'),
    sa.UniqueConstraint('tenant_id', 'tool_name', name='unique_tool_provider_tool_name')
    )
    op.create_table('tenant_preferred_model_providers',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('provider_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('preferred_provider_type', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP(0)'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP(0)'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='tenant_preferred_model_provider_pkey')
    )
    with op.batch_alter_table('tenant_preferred_model_providers', schema=None) as batch_op:
        batch_op.create_index('tenant_preferred_model_provider_tenant_provider_idx', ['tenant_id', 'provider_name'], unique=False)

    # ### end Alembic commands ###
